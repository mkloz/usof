// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

generator dbml {
    provider = "prisma-dbml-generator"
    output   = "./generated/dbml"
}

// generator prismaClassGenerator {
//     provider = "prisma-class-generator"
//     output   = "./generated/prisma-class"
// }

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

enum UserRole {
    ADMIN
    USER
}

model User {
    id            Int       @id @default(autoincrement())
    email         String    @unique
    fullName      String    @map("full_name")
    passwordHash  String    @map("password_hash")
    emailVerified Boolean   @default(false) @map("email_verified")
    rating        Int?      @default(0)
    role          UserRole  @default(USER)
    avatarId      Int?      @unique @map("avatar_id")
    createdAt     DateTime  @default(now()) @map("created_at")
    updatedAt     DateTime  @updatedAt @map("updated_at")
    avatar        File?     @relation(fields: [avatarId], references: [id], onDelete: SetNull, onUpdate: Cascade)
    ratings       Rating[]
    posts         Post[]
    comments      Comment[]
    OTP           Otp[]
    favorites     Post[]    @relation("_post_favorites")

    @@map("user")
}

enum OtpType {
    EMAIL_VERIFICATION
    PASSWORD_RESET
}

model Otp {
    id         Int       @id @default(autoincrement())
    userId     Int       @map("user_id")
    code       String
    type       OtpType   @default(EMAIL_VERIFICATION)
    createdAt  DateTime  @default(now()) @map("created_at")
    activeTill DateTime? @map("active_till")
    user       User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@map("otp")
}

model File {
    id        Int      @id @default(autoincrement())
    name      String   @unique
    url       String?
    createdAt DateTime @default(now()) @map("created_at")
    posts     Post[]   @relation("_post_picture")
    user      User?

    @@map("file")
}

enum RatingType {
    LIKE
    DISLIKE
}

model Rating {
    id        Int        @id @default(autoincrement())
    userId    Int        @map("user_id")
    type      RatingType @default(LIKE)
    createdAt DateTime   @default(now()) @map("created_at")
    postId    Int?       @map("post_id")
    commentId Int?       @map("comment_id")
    user      User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    post      Post?      @relation(fields: [postId], references: [id])
    comment   Comment?   @relation(fields: [commentId], references: [id])

    @@unique([userId, postId])
    @@unique([userId, commentId])
    @@map("rating")
}

enum PostStatus {
    DRAFT
    PUBLISHED
    ARCHIVED
    PRIVATE
}

model Post {
    id         Int        @id @default(autoincrement())
    title      String
    content    String     @db.Text
    createdAt  DateTime   @default(now()) @map("created_at")
    updatedAt  DateTime   @updatedAt @map("updated_at")
    status     PostStatus @default(PUBLISHED)
    authorId   Int?       @map("author_id")
    rating     Int?       @default(0)
    ratings    Rating[]
    comments   Comment[]
    pictures   File[]     @relation("_post_picture")
    author     User?      @relation(fields: [authorId], references: [id], onDelete: SetNull, onUpdate: Cascade)
    categories Category[] @relation("_post_category")
    favorites  User[]     @relation("_post_favorites")

    @@map("post")
}

model Category {
    id          Int      @id @default(autoincrement())
    name        String
    description String?  @db.VarChar(5000)
    createdAt   DateTime @default(now()) @map("created_at")
    updatedAt   DateTime @updatedAt @map("updated_at")
    posts       Post[]   @relation("_post_category")

    @@map("category")
}

model Comment {
    id          Int       @id @default(autoincrement())
    content     String    @db.VarChar(10000)
    createdAt   DateTime  @default(now()) @map("created_at")
    updatedAt   DateTime  @updatedAt @map("updated_at")
    userId      Int       @map("user_id")
    postId      Int       @map("post_id")
    parentId    Int?      @map("parent_id")
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    ratings     Rating[]
    rating      Int?      @default(0)
    parent      Comment?  @relation("subComments", fields: [parentId], references: [id])
    subComments Comment[] @relation("subComments")

    @@map("comment")
}

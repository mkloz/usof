openapi: 3.0.0

info:
  title: Usof Backend API
  description: API documentation for the backend of the reddit like app
  version: 1.0.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://localhost:3000
    description: Local development server
security: []
paths:
  /api/v1/users/me:
    get:
      summary: Get me
      operationId: get-me
      security:
        - JWT: []
      tags:
        - User
      responses:
        '200':
          $ref: '#/components/responses/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
    patch:
      summary: Updates a user
      operationId: update-me
      security:
        - JWT: []
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                fullName:
                  $ref: '#/components/schemas/Name'
                password:
                  $ref: '#/components/schemas/Password'
                avatarId:
                  $ref: '#/components/schemas/ID'
              required:
                - fullName
                - password
      responses:
        '200':
          $ref: '#/components/responses/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
    delete:
      summary: Delete a user by ID
      operationId: delete-user
      security:
        - JWT: []
      tags:
        - User
      responses:
        '200':
          $ref: '#/components/responses/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/v1/users/{id}/posts:
    get:
      summary: Get all posts by user ID
      operationId: get-posts-by-user-id
      tags:
        - Post
        - User
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to get posts
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Posts response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPosts'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/v1/users/{id}/comments:
    get:
      summary: Get all comments by user ID
      operationId: get-comments-by-user-id
      tags:
        - User
        - Comment
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to get comments
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Comments response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Pagination'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Comment'
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/v1/auth/login:
    post:
      summary: User login
      operationId: login
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                email:
                  $ref: '#/components/schemas/Email'
                password:
                  $ref: '#/components/schemas/Password'
      responses:
        '200':
          $ref: '#/components/responses/TokensResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/v1/auth/register:
    post:
      summary: User registration
      operationId: register
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                fullName:
                  $ref: '#/components/schemas/FullName'
                email:
                  $ref: '#/components/schemas/Email'
                password:
                  $ref: '#/components/schemas/Password'
      responses:
        '201':
          description: User registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/v1/auth/refresh:
    post:
      summary: Refresh JWT tokens
      operationId: refresh
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                token:
                  $ref: '#/components/schemas/Token'
      responses:
        '200':
          $ref: '#/components/responses/TokensResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/v1/auth/send-verification:
    post:
      summary: Send email verification
      operationId: send-verification
      tags:
        - Auth
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                email:
                  $ref: '#/components/schemas/Email'
      responses:
        '204':
          description: Email sent
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/v1/auth/verify-email:
    post:
      summary: Verify email
      operationId: verify-email
      tags:
        - Auth
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                email:
                  $ref: '#/components/schemas/Email'
                code:
                  type: string
                  example: '123456'
      responses:
        '204':
          description: Email verified
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/v1/auth/forgot-password:
    post:
      summary: Forgot password
      operationId: forgot-password
      tags:
        - Auth
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                email:
                  $ref: '#/components/schemas/Email'
      responses:
        '204':
          description: Email sent
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/v1/auth/reset-password:
    post:
      summary: Reset password
      operationId: reset-password
      tags:
        - Auth
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                email:
                  $ref: '#/components/schemas/Email'
                code:
                  type: string
                  example: '123456'
                password:
                  $ref: '#/components/schemas/Password'
      responses:
        '204':
          description: Password reset
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/v1/posts:
    get:
      summary: Get all posts
      operationId: get-posts
      tags:
        - Post
      parameters:
        - name: page
          in: query
          required: false
          description: Page number
          schema:
            type: number
        - name: limit
          in: query
          required: false
          description: Limit of items per page
          schema:
            type: number
        - name: search
          in: query
          required: false
          description: Search query
          schema:
            type: string
        - name: categoryId
          in: query
          required: false
          description: Category ID
          schema:
            $ref: '#/components/schemas/ID'
        - name: userId
          in: query
          required: false
          description: Author ID
          schema:
            $ref: '#/components/schemas/ID'
        - name: sortByLikes
          in: query
          required: false
          description: Sort by likes
          schema:
            type: string
            enum:
              - asc
              - desc
        - name: sortByDate
          in: query
          required: false
          description: Sort by date
          schema:
            type: string
            enum:
              - asc
              - desc
        - name: status
          in: query
          required: false
          description: Post status
          schema:
            type: string
            enum:
              - ACTIVE
              - SUSPENDED
              - INACTIVE
        - name: fromDate
          in: query
          required: false
          description: From date
          schema:
            type: string
            format: date-time
        - name: tillDate
          in: query
          required: false
          description: To date
          schema:
            type: string
            format: date-time

      responses:
        '200':
          description: Posts response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPosts'
        '400':
          $ref: '#/components/responses/BadRequest'
    post:
      summary: Create a post
      operationId: create-post
      security:
        - JWT: []
      tags:
        - Post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                title:
                  type: string
                  example: 'My first post'
                content:
                  type: string
                  example: 'This is my first post'
              required:
                - title
                - content
      responses:
        '201':
          $ref: '#/components/responses/PostResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/v1/posts/{id}:
    get:
      summary: Get a post by ID
      operationId: get-post-by-id
      tags:
        - Post
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the post to get
          schema:
            $ref: '#/components/schemas/ID'

      responses:
        '200':
          description: Post response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          $ref: '#/components/responses/BadRequest'
    patch:
      summary: Update a post by ID
      operationId: update-post-by-id
      security:
        - JWT: []
      tags:
        - Post
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the post to update
          schema:
            $ref: '#/components/schemas/ID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                title:
                  type: string
                  example: 'My first post'
                content:
                  type: string
                  example: 'This is my first post'
              required:
                - title
                - content
      responses:
        '200':
          $ref: '#/components/responses/PostResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
    delete:
      summary: Delete a post by ID
      operationId: delete-post-by-id
      security:
        - JWT: []
      tags:
        - Post
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the post to delete
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          $ref: '#/components/responses/PostResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/v1/posts/{id}/comments:
    get:
      summary: Get all comments by post ID
      operationId: get-comments-by-post-id
      tags:
        - Post
        - Comment
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the post to get comments
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Comments response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Pagination'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Comment'
        '400':
          $ref: '#/components/responses/BadRequest'
    post:
      summary: Create a comment
      operationId: create-comment
      security:
        - JWT: []
      tags:
        - Comment
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the post to comment
          schema:
            $ref: '#/components/schemas/ID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                content:
                  type: string
                  example: 'This is a comment'
              required:
                - content
      responses:
        '201':
          $ref: '#/components/responses/CommentResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/v1/posts/{id}/categories:
    get:
      summary: Get all categories by post ID
      operationId: get-categories-by-post-id
      tags:
        - Post
        - Category
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the post to get categories
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Categories response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Pagination'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Category'
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/v1/posts/{id}/like:
    post:
      summary: Like a post
      operationId: like-post
      security:
        - JWT: []
      tags:
        - Post
        - Rating
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the post to like
          schema:
            $ref: '#/components/schemas/ID'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                type:
                  type: string
                  enum:
                    - LIKE
                    - DISLIKE
                  example: LIKE
              required:
                - type

      responses:
        '200':
          $ref: '#/components/responses/RatingResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
    get:
      summary: Get all likes by post ID
      operationId: get-likes-by-post-id
      tags:
        - Post
        - Rating
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the post to get likes
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          $ref: '#/components/responses/RatingResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
    delete:
      summary: Unlike a post
      operationId: unlike-post
      security:
        - JWT: []
      tags:
        - Post
        - Rating
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the post to unlike
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '204':
          description: No content
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/v1/comments:
    get:
      summary: Get all comments
      operationId: get-comments
      tags:
        - Comment
      parameters:
        - name: page
          in: query
          required: false
          description: Page number
          schema:
            type: number
        - name: limit
          in: query
          required: false
          description: Limit of items per page
          schema:
            type: number
      responses:
        '200':
          description: Comments response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Pagination'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Comment'
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/v1/comments/{id}:
    get:
      summary: Get a comment by ID
      operationId: get-comment-by-id
      tags:
        - Comment
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the comment to get
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          $ref: '#/components/responses/CommentResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
    patch:
      summary: Update a comment by ID
      operationId: update-comment-by-id
      security:
        - JWT: []
      tags:
        - Comment
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the comment to update
          schema:
            $ref: '#/components/schemas/ID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                content:
                  type: string
                  example: 'This is a comment'
              required:
                - content
      responses:
        '200':
          $ref: '#/components/responses/CommentResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
    delete:
      summary: Delete a comment by ID
      operationId: delete-comment-by-id
      security:
        - JWT: []
      tags:
        - Comment
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the comment to delete
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          $ref: '#/components/responses/CommentResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/v1/comments/{id}/like:
    post:
      summary: Like a comment
      operationId: like-comment
      security:
        - JWT: []
      tags:
        - Comment
        - Rating
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the comment to like
          schema:
            $ref: '#/components/schemas/ID'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                type:
                  type: string
                  enum:
                    - LIKE
                    - DISLIKE
                  example: LIKE
              required:
                - type
      responses:
        '200':
          $ref: '#/components/responses/RatingResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
    get:
      summary: Get all likes by comment ID
      operationId: get-likes-by-comment-id
      tags:
        - Comment
        - Rating
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the comment to get likes
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          $ref: '#/components/responses/RatingResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
    delete:
      summary: Unlike a comment
      operationId: unlike-comment
      security:
        - JWT: []
      tags:
        - Comment
        - Rating
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the comment to unlike
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '204':
          description: No content
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/v1/files:
    post:
      summary: Upload a file
      operationId: upload-file
      security:
        - JWT: []
      tags:
        - File
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          $ref: '#/components/responses/FileResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/v1/files/{id}:
    get:
      summary: Get a file by ID
      operationId: get-file-by-id
      tags:
        - File
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the file to get
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          $ref: '#/components/responses/FileResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
    delete:
      summary: Delete a file by ID
      operationId: delete-file-by-id
      security:
        - JWT: []
      tags:
        - File
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the file to delete
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          $ref: '#/components/responses/FileResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/v1/categories:
    get:
      summary: Get all categories
      operationId: get-categories
      tags:
        - Category
      parameters:
        - name: page
          in: query
          required: false
          description: Page number
          schema:
            type: number
        - name: limit
          in: query
          required: false
          description: Limit of items per page
          schema:
            type: number
      responses:
        '200':
          description: Categories response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Pagination'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Category'
        '400':
          $ref: '#/components/responses/BadRequest'
    post:
      summary: Create a category
      operationId: create-category
      security:
        - JWT: []
      tags:
        - Category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  example: 'Technology'
                description:
                  type: string
                  example: 'All about technology'
              required:
                - name
                - description
      responses:
        '201':
          $ref: '#/components/responses/CategoryResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/v1/categories/{id}:
    get:
      summary: Get a category by ID
      operationId: get-category-by-id
      tags:
        - Category
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the category to get
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          $ref: '#/components/responses/CategoryResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
    patch:
      summary: Update a category by ID
      operationId: update-category-by-id
      security:
        - JWT: []
      tags:
        - Category
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the category to update
          schema:
            $ref: '#/components/schemas/ID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  example: 'Technology'
                description:
                  type: string
                  example: 'All about technology'
              required:
                - name
                - description
      responses:
        '200':
          $ref: '#/components/responses/CategoryResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
    delete:
      summary: Delete a category by ID
      operationId: delete-category-by-id
      security:
        - JWT: []
      tags:
        - Category
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the category to delete
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          $ref: '#/components/responses/CategoryResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/v1/categories/{id}/posts:
    get:
      summary: Get all posts by category ID
      operationId: get-posts-by-category-id
      tags:
        - Post
        - Category
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the category to get posts
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Posts response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPosts'
        '400':
          $ref: '#/components/responses/BadRequest'
components:
  securitySchemes:
    JWT:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    CategoryResponse:
      description: Category response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Category'
    TokensResponse:
      description: JWT tokens response
      content:
        application/json:
          schema:
            properties:
              accessToken:
                $ref: '#/components/schemas/Token'
              refreshToken:
                $ref: '#/components/schemas/Token'
    UserResponse:
      description: User response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    PostResponse:
      description: Post response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Post'
    CommentResponse:
      description: Comment response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Comment'
    FileResponse:
      description: File response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/File'
    RatingResponse:
      description: Rating response
      content:
        application/json:
          schema:
            properties:
              myLike:
                $ref: '#/components/schemas/Rating'
              likes:
                type: number
                example: 12
              dislikes:
                type: number
                example: 2
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              timestamp:
                type: string
                example: '2021-09-01T12:00:00Z'
              method:
                type: string
                example: GET
              path:
                type: string
                nullable: true
                example: /users/me
              message:
                type: string
                example: 'Invalid request'
              status:
                type: number
                example: 400
  schemas:
    Pagination:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
    PaginationLinks:
      type: object
      properties:
        first:
          type: string
          example: /api/v1/posts?page=1
        last:
          type: string
          example: /api/v1/posts?page=1
        prev:
          type: string
          example: null
        next:
          type: string
          example: null
    PaginationMeta:
      type: object
      properties:
        currentPage:
          type: number
          example: 1
        itemCount:
          type: number
          example: 12
        itemsPerPage:
          type: number
          example: 20
        totalItems:
          type: number
          example: 120
    PaginatedPosts:
      allOf:
        - $ref: '#/components/schemas/Pagination'
        - properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Post'
    Token:
      type: string
      example: 'afdsgrsvc23ff32.dsdcreehfsvcfedcx3£r4fsfd.£RFDsfdsdfdsdf'
    Name:
      type: string
      example: Mykhailo
    ID:
      type: number
      example: 1
    FullName:
      type: string
      example: Mykhailo Kloz
    Password:
      type: string
      example: Pass123$
    Email:
      type: string
      example: micha21cloz@gmail.com
    User:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        fullName:
          $ref: '#/components/schemas/FullName'
        emailVerified:
          type: boolean
          example: true
        email:
          $ref: '#/components/schemas/Email'
        rating:
          type: number
          example: 32
        role:
          type: string
          enum:
            - USER
            - ADMIN
          example: USER
        createdAt:
          type: string
          format: date-time
          example: '2021-09-01T12:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2021-09-01T12:00:00Z'
    File:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          example: 'image.jpg'
        url:
          type: string
          example: 'http://localhost:3000/uploads/image.jpg'
        createdAt:
          type: string
          format: date-time
          example: '2021-09-01T12:00:00Z'
    Rating:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        userId:
          $ref: '#/components/schemas/ID'
        type:
          type: string
          enum:
            - LIKE
            - DISLIKE
          example: LIKE
        createdAt:
          type: string
          format: date-time
          example: '2021-09-01T12:00:00Z'
    Post:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        title:
          type: string
          example: 'My first post'
        content:
          type: string
          example: 'This is my first post'
        rating:
          type: number
          example: 32
        authorId:
          $ref: '#/components/schemas/ID'
        status:
          type: string
          enum:
            - ACTIVE
            - SUSPENDED
            - INACTIVE
          example: ACTIVE
        createdAt:
          type: string
          format: date-time
          example: '2021-09-01T12:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2021-09-01T12:00:00Z'
    Category:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          example: 'Technology'
        description:
          type: string
          example: 'All about technology'
        createdAt:
          type: string
          format: date-time
          example: '2021-09-01T12:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2021-09-01T12:00:00Z'
    Comment:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        postId:
          $ref: '#/components/schemas/ID'
        userId:
          $ref: '#/components/schemas/ID'
        content:
          type: string
          example: 'This is a comment'
        createdAt:
          type: string
          format: date-time
          example: '2021-09-01T12:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2021-09-01T12:00:00Z'

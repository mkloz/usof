openapi: 3.0.0

info:
  title: Usof Backend API
  description: >
    API documentation for the backend of the Reddit-like app. This API manages users, posts, comments, categories, and files.<br>
    It also provides authentication and authorization features. The API is secured with JWT tokens. The API is versioned and follows the RESTful principles.<br>
    The API is built with Node.js, Express.js, and MySQL. The API is documented with OpenAPI 3.0.0.<br><br>
    About roles. The API has 2 main roles: [USER, ADMIN]  and 3 *pseudo roles: [ME, AUTHOR, ANYONE].<br>
    USER - a regular user(anyone who is authenticated).<br>
    ADMIN - an admin user.<br>
    *ME - the user who is making the request.<br>
    *AUTHOR - the author of the resource.<br>
    *ANYONE - any user, including guests.<br>

  version: 1.0.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://localhost:3000
    description: Local development server
security: []
paths:
  /api/v1/users/me:
    get:
      summary: Get me. Open for [ME]
      operationId: get-me
      security:
        - JWT: []
      tags:
        - User
      responses:
        '200':
          $ref: '#/components/responses/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
    patch:
      summary: Updates a user. Open for [ME]
      operationId: update-me
      security:
        - JWT: []
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                fullName:
                  $ref: '#/components/schemas/Name'
                password:
                  $ref: '#/components/schemas/Password'
                avatarId:
                  $ref: '#/components/schemas/ID'
              required:
                - fullName
                - password
      responses:
        '200':
          $ref: '#/components/responses/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
    delete:
      summary: Delete me. Open for [ME]
      operationId: delete-user
      security:
        - JWT: []
      tags:
        - User
      responses:
        '200':
          $ref: '#/components/responses/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/v1/users/me/reactions:
    get:
      summary: Get all likes by user ID. Open for [ME]
      operationId: get-likes-by-user-id
      tags:
        - User
        - Rating
      security:
        - JWT: []
      responses:
        '200':
          description: Likes response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rating'
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/v1/users/me/favorites:
    get:
      summary: Get all favorite posts by user ID. Open for [ME]
      operationId: get-favorites-by-user-id
      tags:
        - User
        - Post
      security:
        - JWT: []
      responses:
        '200':
          description: Favorites response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '400':
          $ref: '#/components/responses/BadRequest'
    post:
      summary: Add a post to favorites. Open for [ME]
      operationId: add-to-favorites
      tags:
        - User
        - Post
      security:
        - JWT: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                postId:
                  $ref: '#/components/schemas/ID'
              required:
                - postId
      responses:
        '201':
          description: Post added to favorites. Open for [ME]
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/v1/users/me/favorites/{id}:
    delete:
      summary: Remove a post from favorites. Open for [ME]
      operationId: remove-from-favorites
      tags:
        - User
        - Post
      security:
        - JWT: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the post to remove from favorites
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '204':
          description: No content
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/v1/users:
    get:
      summary: Get all users. Open for [ADMIN]
      operationId: get-users
      tags:
        - User
        - Admin
      parameters:
        - name: page
          in: query
          required: false
          description: Page number
          schema:
            type: number
        - name: limit
          in: query
          required: false
          description: Limit of items per page
          schema:
            type: number
      responses:
        '200':
          description: Users response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Pagination'
                  - properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/v1/users/{id}:
    get:
      summary: Get a user by ID. Open for [ANYONE]
      operationId: get-user-by-id
      tags:
        - User
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to get
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          $ref: '#/components/responses/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
    patch:
      summary: Update a user by ID. Open for [ADMIN]
      operationId: update-user-by-id
      security:
        - JWT: []
      tags:
        - User
        - Admin
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to update
          schema:
            $ref: '#/components/schemas/ID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                fullName:
                  $ref: '#/components/schemas/Name'
                email:
                  $ref: '#/components/schemas/Email'
                password:
                  $ref: '#/components/schemas/Password'
                role:
                  type: string
                  enum:
                    - USER
                    - ADMIN
                  example: USER
              required:
                - fullName
                - email
                - password
                - role
      responses:
        '200':
          $ref: '#/components/responses/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
    delete:
      summary: Delete a user by ID. Open for [ADMIN]
      operationId: delete-user-by-id
      security:
        - JWT: []
      tags:
        - User
        - Admin
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to delete
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          $ref: '#/components/responses/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/v1/users/{id}/posts:
    get:
      summary: Get all posts by user ID. Open for [ANYONE]
      operationId: get-posts-by-user-id
      tags:
        - Post
        - User
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to get posts
          schema:
            $ref: '#/components/schemas/ID'
        - name: page
          in: query
          required: false
          description: Page number
          schema:
            type: number
        - name: limit
          in: query
          required: false
          description: Limit of items per page
          schema:
            type: number
      responses:
        '200':
          description: Posts response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPosts'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/v1/users/me/posts:
    get:
      summary: Get all posts by user ID. Open for [ME]
      operationId: get-my-posts
      tags:
        - Post
        - User
      parameters:
        - name: page
          in: query
          required: false
          description: Page number
          schema:
            type: number
        - name: limit
          in: query
          required: false
          description: Limit of items per page
          schema:
            type: number
      responses:
        '200':
          description: Posts response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPosts'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/v1/users/{id}/comments:
    get:
      summary: Get all comments by user ID. Open for [ANYONE]
      operationId: get-comments-by-user-id
      tags:
        - User
        - Comment
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to get comments
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Comments response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Pagination'
                  - properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Comment'
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/v1/auth/login:
    post:
      summary: User login. Open for [ANYONE]
      operationId: login
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                email:
                  $ref: '#/components/schemas/Email'
                password:
                  $ref: '#/components/schemas/Password'
      responses:
        '200':
          $ref: '#/components/responses/TokensResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/v1/auth/register:
    post:
      summary: User registration. Open for [ANYONE]
      operationId: register
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                fullName:
                  $ref: '#/components/schemas/FullName'
                email:
                  $ref: '#/components/schemas/Email'
                password:
                  $ref: '#/components/schemas/Password'
      responses:
        '201':
          description: User registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/v1/auth/refresh:
    post:
      summary: Refresh JWT tokens. Open for [ANYONE]
      operationId: refresh
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                token:
                  $ref: '#/components/schemas/Token'
      responses:
        '200':
          $ref: '#/components/responses/TokensResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/v1/auth/send-verification:
    post:
      summary: Send email verification. Open for [ANYONE]
      operationId: send-verification
      tags:
        - Auth
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                email:
                  $ref: '#/components/schemas/Email'
      responses:
        '204':
          description: Email sent
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/v1/auth/verify-email:
    post:
      summary: Verify email. Open for [ANYONE]
      operationId: verify-email
      tags:
        - Auth
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                email:
                  $ref: '#/components/schemas/Email'
                code:
                  type: string
                  example: '123456'
      responses:
        '204':
          description: Email verified
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/v1/auth/forgot-password:
    post:
      summary: Forgot password. Open for [ANYONE]
      operationId: forgot-password
      tags:
        - Auth
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                email:
                  $ref: '#/components/schemas/Email'
      responses:
        '204':
          description: Email sent
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/v1/auth/reset-password:
    post:
      summary: Reset password. Open for [ANYONE]
      operationId: reset-password
      tags:
        - Auth
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                email:
                  $ref: '#/components/schemas/Email'
                code:
                  type: string
                  example: '123456'
                password:
                  $ref: '#/components/schemas/Password'
      responses:
        '204':
          description: Password reset
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/v1/posts:
    get:
      summary: Get all posts. Open for [ANYONE]
      operationId: get-posts
      tags:
        - Post
      parameters:
        - name: page
          in: query
          required: false
          description: Page number
          schema:
            type: number
        - name: limit
          in: query
          required: false
          description: Limit of items per page
          schema:
            type: number
        - name: search
          in: query
          required: false
          description: Search query
          schema:
            type: string
        - name: categoryId
          in: query
          required: false
          description: Category ID
          schema:
            $ref: '#/components/schemas/ID'
        - name: userId
          in: query
          required: false
          description: Author ID
          schema:
            $ref: '#/components/schemas/ID'
        - name: sortByLikes
          in: query
          required: false
          description: Sort by likes
          schema:
            type: string
            enum:
              - asc
              - desc
        - name: sortByDate
          in: query
          required: false
          description: Sort by date
          schema:
            type: string
            enum:
              - asc
              - desc
        - name: status
          in: query
          required: false
          description: Post status
          schema:
            type: string
            enum:
              - PUBLISHED
              - ARCHIVED
        - name: fromDate
          in: query
          required: false
          description: From date
          schema:
            type: string
            format: date-time
        - name: tillDate
          in: query
          required: false
          description: To date
          schema:
            type: string
            format: date-time

      responses:
        '200':
          description: Posts response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPosts'
        '400':
          $ref: '#/components/responses/BadRequest'
    post:
      summary: Create a post. Open for [USER]
      operationId: create-post
      security:
        - JWT: []
      tags:
        - Post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                title:
                  type: string
                  example: 'My first post'
                content:
                  type: string
                  example: 'This is my first post'
              required:
                - title
                - content
      responses:
        '201':
          $ref: '#/components/responses/PostResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/v1/posts/{id}:
    get:
      summary: Get a post by ID. Open for [ANYONE]
      operationId: get-post-by-id
      tags:
        - Post
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the post to get
          schema:
            $ref: '#/components/schemas/ID'

      responses:
        '200':
          description: Post response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          $ref: '#/components/responses/BadRequest'
    patch:
      summary: Update a post by ID. Open for [AUTHOR, ADMIN]
      operationId: update-post-by-id
      security:
        - JWT: []
      tags:
        - Post
        - Admin
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the post to update
          schema:
            $ref: '#/components/schemas/ID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                title:
                  type: string
                  example: 'My first post'
                content:
                  type: string
                  example: 'This is my first post'
              required:
                - title
                - content
      responses:
        '200':
          $ref: '#/components/responses/PostResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
    delete:
      summary: Delete a post by ID. Open for [AUTHOR, ADMIN]
      operationId: delete-post-by-id
      security:
        - JWT: []
      tags:
        - Post
        - Admin
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the post to delete
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          $ref: '#/components/responses/PostResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/v1/posts/{id}/comments:
    get:
      summary: Get all comments by post ID. Open for [ANYONE]
      operationId: get-comments-by-post-id
      tags:
        - Post
        - Comment
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the post to get comments
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Comments response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Pagination'
                  - properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Comment'
        '400':
          $ref: '#/components/responses/BadRequest'
    post:
      summary: Create a comment. Open for [USER]
      operationId: create-comment
      security:
        - JWT: []
      tags:
        - Comment
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the post to comment
          schema:
            $ref: '#/components/schemas/ID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                content:
                  type: string
                  example: 'This is a comment'
              required:
                - content
      responses:
        '201':
          $ref: '#/components/responses/CommentResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/v1/posts/{id}/categories:
    get:
      summary: Get all categories by post ID. Open for [ANYONE]
      operationId: get-categories-by-post-id
      tags:
        - Post
        - Category
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the post to get categories
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Categories response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Pagination'
                  - properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Category'
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/v1/posts/{id}/categories/{categoryId}:
    post:
      summary: Add a category to a post. Open for [AUTHOR]
      operationId: add-category-to-post
      security:
        - JWT: []
      tags:
        - Post
        - Category
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the post to add category
          schema:
            $ref: '#/components/schemas/ID'
        - name: categoryId
          in: path
          required: true
          description: ID of the category to add
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '201':
          description: Category added to post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          $ref: '#/components/responses/BadRequest'
    delete:
      summary: Remove a category from a post. Open for [AUTHOR, ADMIN]
      operationId: remove-category-from-post
      security:
        - JWT: []
      tags:
        - Post
        - Category
        - Admin
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the post to remove category
          schema:
            $ref: '#/components/schemas/ID'
        - name: categoryId
          in: path
          required: true
          description: ID of the category to remove
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '204':
          description: No content
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/v1/posts/{id}/reactions/my:
    post:
      summary: Like a post. Open for [USER]
      operationId: like-post
      security:
        - JWT: []
      tags:
        - Post
        - Rating
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the post to like
          schema:
            $ref: '#/components/schemas/ID'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                type:
                  type: string
                  enum:
                    - LIKE
                    - DISLIKE
                  example: LIKE
              required:
                - type

      responses:
        '200':
          $ref: '#/components/responses/RatingResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
    get:
      summary: Get all likes by post ID. Open for [ME]
      operationId: get-likes-by-post-id
      tags:
        - Post
        - Rating
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the post to get likes
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          $ref: '#/components/responses/RatingResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
    delete:
      summary: Unlike a post. Open for [ME]
      operationId: unlike-post
      security:
        - JWT: []
      tags:
        - Post
        - Rating
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the post to unlike
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '204':
          description: No content
        '400':
          $ref: '#/components/responses/BadRequest'
    patch:
      summary: Update a like by post ID. Open for [ME]
      operationId: update-like-by-post-id
      security:
        - JWT: []
      tags:
        - Post
        - Rating
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the post to update like
          schema:
            $ref: '#/components/schemas/ID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                type:
                  type: string
                  enum:
                    - LIKE
                    - DISLIKE
                  example: LIKE
              required:
                - type
      responses:
        '200':
          $ref: '#/components/responses/RatingResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/v1/comments:
    get:
      summary: Get all comments. Open for [ANYONE]
      operationId: get-comments
      tags:
        - Comment
      parameters:
        - name: page
          in: query
          required: false
          description: Page number
          schema:
            type: number
        - name: limit
          in: query
          required: false
          description: Limit of items per page
          schema:
            type: number
        - name: postId
          in: query
          required: false
          description: Post ID
          schema:
            $ref: '#/components/schemas/ID'
        - name: userId
          in: query
          required: false
          description: Author ID
          schema:
            $ref: '#/components/schemas/ID'
        - name: sortByLikes
          in: query
          required: false
          description: Sort by likes
          schema:
            type: string
            enum:
              - asc
              - desc
        - name: sortByDate
          in: query
          required: false
          description: Sort by date
          schema:
            type: string
            enum:
              - asc
              - desc
        - name: parentId
          in: query
          required: false
          description: Parent ID
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Comments response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Pagination'
                  - properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Comment'
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/v1/comments/{id}:
    get:
      summary: Get a comment by ID. Open for [ANYONE]
      operationId: get-comment-by-id
      tags:
        - Comment
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the comment to get
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          $ref: '#/components/responses/CommentResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
    patch:
      summary: Update a comment by ID. Open for [AUTHOR, ADMIN]
      operationId: update-comment-by-id
      security:
        - JWT: []
      tags:
        - Comment
        - Admin
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the comment to update
          schema:
            $ref: '#/components/schemas/ID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                content:
                  type: string
                  example: 'This is a comment'
              required:
                - content
      responses:
        '200':
          $ref: '#/components/responses/CommentResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
    delete:
      summary: Delete a comment by ID. Open for [AUTHOR, ADMIN]
      operationId: delete-comment-by-id
      security:
        - JWT: []
      tags:
        - Comment
        - Admin
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the comment to delete
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          $ref: '#/components/responses/CommentResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/v1/comments/{id}/reactions/my:
    post:
      summary: Like a comment. Open for [ME]
      operationId: like-comment
      security:
        - JWT: []
      tags:
        - Comment
        - Rating
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the comment to like
          schema:
            $ref: '#/components/schemas/ID'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                type:
                  type: string
                  enum:
                    - LIKE
                    - DISLIKE
                  example: LIKE
              required:
                - type
      responses:
        '200':
          $ref: '#/components/responses/RatingResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
    get:
      summary: Get all likes by comment ID. Open for [ME]
      operationId: get-likes-by-comment-id
      tags:
        - Comment
        - Rating
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the comment to get likes
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          $ref: '#/components/responses/RatingResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
    delete:
      summary: Unlike a comment. Open for [ME]
      operationId: unlike-comment
      security:
        - JWT: []
      tags:
        - Comment
        - Rating
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the comment to unlike
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '204':
          description: No content
        '400':
          $ref: '#/components/responses/BadRequest'
    patch:
      summary: Update a like by comment ID. Open for [ME]
      operationId: update-like-by-comment-id
      security:
        - JWT: []
      tags:
        - Comment
        - Rating
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the comment to update like
          schema:
            $ref: '#/components/schemas/ID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                type:
                  type: string
                  enum:
                    - LIKE
                    - DISLIKE
                  example: LIKE
              required:
                - type
      responses:
        '200':
          $ref: '#/components/responses/RatingResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/v1/files:
    post:
      summary: Upload a file. Open for [USER]
      operationId: upload-file
      security:
        - JWT: []
      tags:
        - File
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '201':
          $ref: '#/components/responses/FileResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/v1/files/{id}:
    get:
      summary: Get a file by ID. Open for [ANYONE]
      operationId: get-file-by-id
      tags:
        - File
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the file to get
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          $ref: '#/components/responses/FileResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
    delete:
      summary: Delete a file by ID. Open for [USER]
      operationId: delete-file-by-id
      security:
        - JWT: []
      tags:
        - File
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the file to delete
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          $ref: '#/components/responses/FileResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/v1/categories:
    get:
      summary: Get all categories. Open for [ANYONE]
      operationId: get-categories
      tags:
        - Category
      parameters:
        - name: page
          in: query
          required: false
          description: Page number
          schema:
            type: number
        - name: limit
          in: query
          required: false
          description: Limit of items per page
          schema:
            type: number
        - name: search
          in: query
          required: false
          description: Search query
          schema:
            type: string
      responses:
        '200':
          description: Categories response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Pagination'
                  - properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Category'
        '400':
          $ref: '#/components/responses/BadRequest'
    post:
      summary: Create a category. Open for [ADMIN]
      operationId: create-category
      security:
        - JWT: []
      tags:
        - Category
        - Admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  example: 'Technology'
                description:
                  type: string
                  example: 'All about technology'
              required:
                - name
                - description
      responses:
        '201':
          $ref: '#/components/responses/CategoryResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/v1/categories/{id}:
    get:
      summary: Get a category by ID. Open for [ANYONE]
      operationId: get-category-by-id
      tags:
        - Category
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the category to get
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          $ref: '#/components/responses/CategoryResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
    patch:
      summary: Update a category by ID. Open for [ADMIN]
      operationId: update-category-by-id
      security:
        - JWT: []
      tags:
        - Category
        - Admin
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the category to update
          schema:
            $ref: '#/components/schemas/ID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  example: 'Technology'
                description:
                  type: string
                  example: 'All about technology'
              required:
                - name
                - description
      responses:
        '200':
          $ref: '#/components/responses/CategoryResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
    delete:
      summary: Delete a category by ID. Open for [ADMIN]
      operationId: delete-category-by-id
      security:
        - JWT: []
      tags:
        - Category
        - Admin
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the category to delete
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          $ref: '#/components/responses/CategoryResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
components:
  securitySchemes:
    JWT:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    CategoryResponse:
      description: Category response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Category'
    TokensResponse:
      description: JWT tokens response
      content:
        application/json:
          schema:
            properties:
              accessToken:
                $ref: '#/components/schemas/Token'
              refreshToken:
                $ref: '#/components/schemas/Token'
    UserResponse:
      description: User response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    PostResponse:
      description: Post response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Post'
    CommentResponse:
      description: Comment response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Comment'
    FileResponse:
      description: File response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/File'
    RatingResponse:
      description: Rating response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Rating'
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              timestamp:
                type: string
                example: '2021-09-01T12:00:00Z'
              method:
                type: string
                example: GET
              path:
                type: string
                nullable: true
                example: /users/me
              message:
                type: string
                example: 'Invalid request'
              status:
                type: number
                example: 400
  schemas:
    Pagination:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
    PaginationLinks:
      type: object
      properties:
        first:
          type: string
          example: /api/v1/posts?page=1
        last:
          type: string
          example: /api/v1/posts?page=1
        prev:
          type: string
          example: null
        next:
          type: string
          example: null
    PaginationMeta:
      type: object
      properties:
        currentPage:
          type: number
          example: 1
        itemCount:
          type: number
          example: 12
        itemsPerPage:
          type: number
          example: 20
        totalItems:
          type: number
          example: 120
    PaginatedPosts:
      allOf:
        - $ref: '#/components/schemas/Pagination'
        - properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/Post'
    Token:
      type: string
      example: 'afdsgrsvc23ff32.dsdcreehfsvcfedcx3£r4fsfd.£RFDsfdsdfdsdf'
    Name:
      type: string
      example: Mykhailo
    ID:
      type: number
      example: 1
    FullName:
      type: string
      example: Mykhailo Kloz
    Password:
      type: string
      example: Pass123$
    Email:
      type: string
      example: micha21cloz@gmail.com
    User:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        fullName:
          $ref: '#/components/schemas/FullName'
        emailVerified:
          type: boolean
          example: true
        email:
          $ref: '#/components/schemas/Email'
        rating:
          type: number
          example: 32
        role:
          type: string
          enum:
            - USER
            - ADMIN
          example: USER
        createdAt:
          type: string
          format: date-time
          example: '2021-09-01T12:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2021-09-01T12:00:00Z'
        avatarId:
          $ref: '#/components/schemas/ID'
        avatar:
          $ref: '#/components/schemas/File'
    File:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          example: 'image.jpg'
        url:
          type: string
          example: 'http://localhost:3000/uploads/image.jpg'
        createdAt:
          type: string
          format: date-time
          example: '2021-09-01T12:00:00Z'
    Rating:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        userId:
          $ref: '#/components/schemas/ID'
        postId:
          $ref: '#/components/schemas/ID'
        commentId:
          $ref: '#/components/schemas/ID'
        type:
          type: string
          enum:
            - LIKE
            - DISLIKE
          example: LIKE
        createdAt:
          type: string
          format: date-time
          example: '2021-09-01T12:00:00Z'
    Post:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        title:
          type: string
          example: 'My first post'
        content:
          type: string
          example: 'This is my first post'
        rating:
          type: number
          example: 32
        authorId:
          $ref: '#/components/schemas/ID'
        status:
          type: string
          enum:
            - PUBLISHED
            - DRAFT
            - PRIVATE
            - ARCHIVED
          example: PUBLISHED
        createdAt:
          type: string
          format: date-time
          example: '2021-09-01T12:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2021-09-01T12:00:00Z'
        _count:
          type: object
          properties:
            comments:
              type: number
              example: 12
        pictures:
          type: array
          items:
            $ref: '#/components/schemas/File'
        author:
          $ref: '#/components/schemas/User'
    Category:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          example: 'Technology'
        description:
          type: string
          example: 'All about technology'
        createdAt:
          type: string
          format: date-time
          example: '2021-09-01T12:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2021-09-01T12:00:00Z'
    Comment:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        postId:
          $ref: '#/components/schemas/ID'
        userId:
          $ref: '#/components/schemas/ID'
        content:
          type: string
          example: 'This is a comment'
        parentId:
          $ref: '#/components/schemas/ID'
        createdAt:
          type: string
          format: date-time
          example: '2021-09-01T12:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2021-09-01T12:00:00Z'
